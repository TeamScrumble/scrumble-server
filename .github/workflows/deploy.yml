name: Java 애플리케이션 빌드 및 AWS Lightsail 배포

on:
  workflow_dispatch:
    inputs:
        deploy_target:
          description: 'Deploy server'
          required: true
          type: choice
          options:
          - server
  

jobs:
  build-and-deploy:
    runs-on: build
    
    steps:
    - name: 소스 코드 체크아웃
      uses: actions/checkout@v3
    
    - name: JDK 23 설정
      uses: actions/setup-java@v3
      with:
        java-version: '23'
        distribution: 'temurin'
        cache: gradle
    
    - name: Gradle 캐시 설정
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Gradle 실행 권한 부여
      run: chmod +x gradlew
    
    - name: Gradle로 빌드
      run: ./gradlew bootJar --parallel --build-cache
    
    - name: Docker 이미지 빌드
      run: |
        docker build -t spring-app:latest .

    - name: AWS 자격 증명 설정
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: AWS Lightsail 컨테이너에 배포
      run: |
        aws lightsail push-container-image \
        --label ${{ secrets.BACKEND_SERVICE_NAME }} \
        --region ap-northeast-2 \
        --service-name ${{ secrets.BACKEND_SERVICE_NAME }} \
        --image "spring-app:latest"

    - name: 이미지 정보 출력
      run: echo "Pushed image digest is ${{ steps.push-image.outputs.imageDigest }}"

    - name: 현재 배포 상태 가져오기
      run: |
        aws lightsail get-container-services \
        --service-name ${{ secrets.BACKEND_SERVICE_NAME }} \
        --region ap-northeast-2 > service_info.json
        cat service_info.json

    - name: 현재 배포 JSON 출력
      run: |
        CONTAINER_IMAGE=$(aws lightsail get-container-images --service-name ${{ secrets.BACKEND_SERVICE_NAME }} --region ap-northeast-2 --query 'containerImages[0].image' --output text)
        echo "Latest container image: $CONTAINER_IMAGE"
        
        # 배포 JSON 준비
        cat > deployment.json << EOF
        {
          "containers": {
            "app": {
              "image": "$CONTAINER_IMAGE",
              "ports": {
                "8080": "HTTP"
              },
              "environment": {
                "SPRING_PROFILES_ACTIVE": "production"
              }
            }
          },
          "publicEndpoint": {
            "containerName": "app",
            "containerPort": 8080,
            "healthCheck": {
              "healthyThreshold": 2,
              "unhealthyThreshold": 2,
              "timeoutSeconds": 5,
              "intervalSeconds": 10,
              "path": "/actuator/health",
              "successCodes": "200-299"
            }
          }
        }
        EOF
        
        cat deployment.json

    - name: AWS Lightsail 컨테이너 서비스 배포
      run: |
        aws lightsail create-container-service-deployment \
        --service-name ${{ secrets.BACKEND_SERVICE_NAME }} \
        --region ap-northeast-2 \
        --cli-input-json file://deployment.json
