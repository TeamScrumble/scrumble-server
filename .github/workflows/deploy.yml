name: Java 애플리케이션 빌드 및 AWS Lightsail 배포

on:
  workflow_dispatch:
    inputs:
        deploy_target:
          description: 'Deploy server'
          required: true
          type: choice
          options:
          - server
  

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 소스 코드 체크아웃
      uses: actions/checkout@v3
    
    - name: JDK 23 설정
      uses: actions/setup-java@v3
      with:
        java-version: '23'
        distribution: 'temurin'
        cache: gradle
    
    - name: Gradle 캐시 설정
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Gradle 실행 권한 부여
      run: chmod +x gradlew
    
    - name: Gradle로 빌드
      run: ./gradlew bootJar --parallel --build-cache
    
    - name: Docker 이미지 빌드
      run: |
        docker build -t spring-app:latest .

    - name: AWS 자격 증명 설정
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: AWS Lightsail 컨테이너에 배포
      run: |
        aws lightsail create-container-service-deployment \
        --service-name ${{ secrets.BACKEND_SERVICE_NAME }} \
        --containers '{
          "spring": {
            "image": "spring-app:latest",
            "ports": {
              "8080": "HTTP"
            }
          }
        }' \
        --public-endpoint '{
          "containerName": "spring",
          "containerPort": 8080,
          "healthCheck": {
            "path": "/actuator/health",
            "intervalSeconds": 10,
            "timeoutSeconds": 5,
            "unhealthyThreshold": 2,
            "healthyThreshold": 2
          }
        }'
