name: Deploy to AWS Lightsail

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 23
      uses: actions/setup-java@v3
      with:
        java-version: '23'
        distribution: 'temurin'
        cache: gradle
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build with Gradle
      run: ./gradlew bootJar --parallel --build-cache
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    
    - name: Build and push to Amazon ECR
      env:
        ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
        ECR_REPOSITORY: scrumble-server
        IMAGE_TAG: latest
      run: |
        # ECR 로그인
        aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $ECR_REGISTRY
        
        # 이미지 빌드
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        
        # 이미지 푸시
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # 이미지 URI 저장
        echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
    
    - name: Deploy to Lightsail
      env:
        BACKEND_SERVICE_NAME: ${{ secrets.BACKEND_SERVICE_NAME }}
      run: |
        # 컨테이너 서비스 배포
        aws lightsail create-container-service-deployment \
          --service-name $BACKEND_SERVICE_NAME \
          --containers "{
            \"spring\": {
              \"image\": \"${{ env.IMAGE_URI }}\",
              \"ports\": {
                \"8080\": \"HTTP\"
              }
            }
          }" \
          --public-endpoint "{
            \"containerName\": \"spring\",
            \"containerPort\": 8080,
            \"healthCheck\": {
              \"path\": \"/actuator/health\",
              \"intervalSeconds\": 10,
              \"timeoutSeconds\": 5,
              \"unhealthyThreshold\": 2,
              \"healthyThreshold\": 2
            }
          }" 